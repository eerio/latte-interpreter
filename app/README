Zadanie 2: interpreter
JPP @ MIMUW 2022/2023
Paweł Balawender, 429141

Zaimplementowałem język w stylu Latte, bez udziwnień.
Z podpunktów 07 i 08, które były do wyboru, wybrałem 07.
W podpunkcie 07 z kolei, wybrałem przekazywanie przez referencję i przez wartość,
tj. w języku obsługuję dodanie "&" przed identyfikatorem w deklaracji funkcji,
by przekazywać ten argument przez referencję.

Jeśli chodzi o zmiany względem deklaracji: 
- wycofałem się z implementowania tablic
- zamiast tego będę obsługiwać punkt 13: funkcje zagnieżdżone ze statycznym wiązaniem

Póki co mam zaimplementowane wszystko na 20 punktów,
a do tego type-checking i podwaliny pod pozostałe zadeklarowane podpunkty.

Muszę zmienić w języku jedną rzecz - funkcje w pamięci będę trzymać
jako rzeczywiście funkcje [Arg] -> Val, a nie jak teraz (Env, [Arg], Block).
To umożliwi mi zaimplementowanie właśnie punktu 13.

Dla przypomnienia, moja tabelka cech,
teraz już wraz z instrukcjami odpalenia przykładowych programów do feature'ów:
(proszę pamiętać o podaniu argumentu uruchamiając przykład good/09-fibonacci-sys-arg.lt)

Moje progamy to listy statementów. Do "biblioteki standardowej" dodałem
funkcje print, printInt i atoi, wykorzystywane intensywnie przez przykłady z
rodziny 'fibonacci'. Do tego można przekazać input do programu
przez wiersz poleceń, a w programie jest on widoczny pod identyfikatorem "arg" typu string.
(przykład tego zachowania jest właśnie w w/w pliku good/09-fibonacci-sys-arg.lt)

  Na 15 punktów
+ 01 (trzy typy)
./interpreter bad/01-if-int.lt 
./interpreter bad/01-fibonacci-str.lt
+ 02 (literały, arytmetyka, porównania)
+ 03 (zmienne, przypisanie)
+ 04 (print)
./interpreter bad/04-invalid-print-1.lt
./interpreter bad/04-invalid-print-2.lt

+ 05 (while, if)
+ 06 (funkcje lub procedury, rekurencja)
./interpreter good/01-02-04-06-fibonacci-recursive.lt 

+ 07 (przez zmienną / przez wartość / in/out)
./interpreter good/07-fibonacci-ref.lt

- 08 (zmienne read-only i pętla for)
  Na 20 punktów
+ 09 (przesłanianie i statyczne wiązanie)
./interpreter good/09-fibonacci-global.lt
./interpreter good/09-fibonacci-sys-arg.lt 17

+ 10 (obsługa błędów wykonania)
./interpreter good/10-division-by-zero.lt

+ 11 (funkcje zwracające wartość)
./interpreter good/11-user-id.lt 

  Na 30 punktów
+ 12 (4) (statyczne typowanie)
./interpreter good/12-fun-incr.lt
./interpreter good/12-user-of-id.lt

+ 13 (2) (funkcje zagnieżdżone ze statycznym wiązaniem)
- 14 (1/2) (rekordy/listy/tablice/tablice wielowymiarowe)
- 15 (2) (krotki z przypisaniem)
+ 16 (1) (break, continue)
+ 17 (4) (funkcje wyższego rzędu, anonimowe, domknięcia)
- 18 (3) (generatory)

Razem: 30 punktów